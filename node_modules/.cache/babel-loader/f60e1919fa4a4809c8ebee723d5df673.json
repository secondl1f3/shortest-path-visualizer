{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadfajar/Masters/Computer Science/Algorithm/graph/Shortest-Path-Algorithms-Visualizer-source-code/src/components/Visualizer.js\";\nimport React, { Component } from 'react';\nimport Node from \"./Node\";\nimport \"./node.css\";\nimport \"./visualizer.css\";\nimport Dijkstra from \"../algorithms/Dijkstra\";\nimport BellmanFord from \"../algorithms/BellmanFord\";\nimport BFS from \"../algorithms/BFS\";\nimport FloydWarshall from \"../algorithms/FloydWarshall\";\n\nfunction generateRandomNumber(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst rows = 10;\nconst cols = 10;\nvar src_row = generateRandomNumber(0, 9);\nvar src_col = generateRandomNumber(0, 9);\nvar dst_row = 0;\n\nif (src_row === dst_row) {\n  if (src_row > 0) {\n    dst_row = src_row - 1;\n  } else {\n    dst_row = src_row + 1;\n  }\n}\n\nvar dst_col = generateRandomNumber(0, 9);\nconst dx = [-1, 0, 1, 0];\nconst dy = [0, 1, 0, -1];\nvar newGrid = [];\nvar selectedAlgorithm = \"\";\nvar isPathClear = true;\nexport default class Visualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: []\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    this.setState({\n      grid\n    });\n  }\n  /* clear path with source, destination and weights unchanged */\n\n\n  clearPath() {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        setTimeout(() => {\n          var node = newGrid[i][j];\n          var newClass = \"\";\n\n          if (node.x === src_row && node.y === src_col) {\n            newClass = 'node-src';\n          } else if (node.x === dst_row && node.y === dst_col) {\n            newClass = 'node-dst';\n          } else {\n            newClass = 'node-other';\n          }\n\n          document.getElementById(`node-${node.x}-${node.y}`).className = newClass;\n        }, 5);\n      }\n    }\n\n    chooseAlgorithm(\"\");\n    setPathClear(true);\n    const newclass = \"shortest-path-length path-not-found\";\n    document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Select Algorithm to Visualize';\n    document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n    document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"\";\n  }\n  /* re-intialize grid with different weights */\n\n\n  reconfigureGrid() {\n    resetSourceAndDestination();\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        setTimeout(() => {\n          var node = newGrid[i][j];\n          var newClass = \"\";\n\n          if (node.x === src_row && node.y === src_col) {\n            newClass = 'node-src';\n          } else if (node.x === dst_row && node.y === dst_col) {\n            newClass = 'node-dst';\n          } else {\n            newClass = 'node-other';\n          }\n\n          document.getElementById(`node-${node.x}-${node.y}`).className = newClass;\n          var x = document.getElementById(`node-${node.x}-${node.y}`);\n          x.querySelector(\".weighted\").innerHTML = newGrid[i][j].weight;\n        }, 5);\n      }\n    }\n\n    this.componentDidMount();\n    chooseAlgorithm(\"\");\n    setPathClear(true);\n    const newclass = \"shortest-path-length path-not-found\";\n    document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Select Algorithm to Visualize';\n    document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n    document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"\";\n  }\n  /* Visualize BFS Algorithm onClick */\n\n\n  visualizeBFS() {\n    const src = newGrid[src_row][src_col];\n    const dst = newGrid[dst_row][dst_col];\n    const result = BFS(newGrid, src, dst);\n    const shortestPathLength = result[0];\n    const time = result[1];\n    const newclass = \"shortest-path-length path-found\";\n    setTimeout(() => {\n      document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n      document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"Total cost associated with Minimum Cost Path is \" + shortestPathLength;\n      document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Select Algorithm to Visualize';\n    }, 40 * time);\n    setPathClear(false);\n    console.log(shortestPathLength);\n  }\n  /* Visualize Dijkstra's Algorithm onClick */\n\n\n  visualizeDijkstra() {\n    const src = newGrid[src_row][src_col];\n    const dst = newGrid[dst_row][dst_col];\n    const result = Dijkstra(newGrid, src, dst);\n    const shortestPathLength = result[0];\n    const time = result[1];\n    const newclass = \"shortest-path-length path-found\";\n    setTimeout(() => {\n      document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n      document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"Total cost associated with Minimum Cost Path is \" + shortestPathLength;\n      document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Select Algorithm to Visualize';\n    }, 40 * time);\n    setPathClear(false);\n    console.log(shortestPathLength);\n  }\n  /* Visualize Bellman Ford Algorithm onClick */\n\n\n  visualizeBellmanFord() {\n    const src = newGrid[src_row][src_col];\n    const dst = newGrid[dst_row][dst_col];\n    const result = BellmanFord(newGrid, src, dst);\n    const shortestPathLength = result[0];\n    const time = result[1];\n    const newclass = \"shortest-path-length path-found\";\n    setTimeout(() => {\n      document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n      document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"Total cost associated with Minimum Cost Path is \" + shortestPathLength;\n      document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Select Algorithm to Visualize';\n    }, 10 * time);\n    setPathClear(false);\n    console.log(shortestPathLength);\n  }\n  /* Visualize Floyd Warshall Algorithm onClick */\n\n\n  visualizeFloydWarshall() {\n    const src = newGrid[src_row][src_col];\n    const dst = newGrid[dst_row][dst_col];\n    const result = FloydWarshall(newGrid, src, dst);\n    const shortestPathLength = result[0];\n    const time = result[1];\n    const newclass = \"shortest-path-length path-found\";\n    setTimeout(() => {\n      document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n      document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"Total cost associated with Minimum Cost Path is \" + shortestPathLength;\n      document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Select Algorithm to Visualize';\n    }, 10 * time);\n    setPathClear(false);\n    console.log(shortestPathLength);\n  }\n\n  handleClickBFS() {\n    console.log(\"BFS got selected\");\n    chooseAlgorithm(\"BFS\");\n    setPathClear(true);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        setTimeout(() => {\n          var node = newGrid[i][j];\n          var newClass = '';\n\n          if (node.x === src_row && node.y === src_col) {\n            newClass = 'node-src';\n          } else if (node.x === dst_row && node.y === dst_col) {\n            newClass = 'node-dst';\n          } else {\n            newClass = 'node-other';\n          }\n\n          document.getElementById(`node-${node.x}-${node.y}`).className = newClass;\n          var x = document.getElementById(`node-${node.x}-${node.y}`);\n          x.querySelector(\".weighted\").innerHTML = \"\";\n        }, 5);\n      }\n    }\n\n    const newclass = \"shortest-path-length path-not-found\";\n    document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n    document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"\";\n    document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Visualize Breadth First Search';\n  }\n\n  handleClickDijkstra() {\n    console.log(\"Dijkstra got selected\");\n    chooseAlgorithm(\"Dijkstra\");\n    setPathClear(true);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        setTimeout(() => {\n          var node = newGrid[i][j];\n          var newClass = '';\n\n          if (node.x === src_row && node.y === src_col) {\n            newClass = 'node-src';\n          } else if (node.x === dst_row && node.y === dst_col) {\n            newClass = 'node-dst';\n          } else {\n            newClass = 'node-other';\n          }\n\n          document.getElementById(`node-${node.x}-${node.y}`).className = newClass;\n          var x = document.getElementById(`node-${node.x}-${node.y}`);\n          x.querySelector(\".weighted\").innerHTML = newGrid[i][j].weight;\n        }, 5);\n      }\n    }\n\n    const newclass = \"shortest-path-length path-not-found\";\n    document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n    document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"\";\n    document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Visualize Dijkstra\\'s Algorithm';\n  }\n\n  handleClickBellmanFord() {\n    console.log(\"Bellman Ford got selected\");\n    chooseAlgorithm(\"BellmanFord\");\n    setPathClear(true);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        setTimeout(() => {\n          var node = newGrid[i][j];\n          var newClass = '';\n\n          if (node.x === src_row && node.y === src_col) {\n            newClass = 'node-src';\n          } else if (node.x === dst_row && node.y === dst_col) {\n            newClass = 'node-dst';\n          } else {\n            newClass = 'node-other';\n          }\n\n          document.getElementById(`node-${node.x}-${node.y}`).className = newClass;\n          var x = document.getElementById(`node-${node.x}-${node.y}`);\n          x.querySelector(\".weighted\").innerHTML = newGrid[i][j].weight;\n        }, 5);\n      }\n    }\n\n    const newclass = \"shortest-path-length path-not-found\";\n    document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n    document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"\";\n    document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Visualize Bellman Ford Algorithm';\n  }\n\n  handleClickFloydWarshall() {\n    console.log(\"Floyd Warshall got selected\");\n    chooseAlgorithm(\"FloydWarshall\");\n    setPathClear(true);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        setTimeout(() => {\n          var node = newGrid[i][j];\n          var newClass = '';\n\n          if (node.x === src_row && node.y === src_col) {\n            newClass = 'node-src';\n          } else if (node.x === dst_row && node.y === dst_col) {\n            newClass = 'node-dst';\n          } else {\n            newClass = 'node-other';\n          }\n\n          document.getElementById(`node-${node.x}-${node.y}`).className = newClass;\n          var x = document.getElementById(`node-${node.x}-${node.y}`);\n          x.querySelector(\".weighted\").innerHTML = newGrid[i][j].weight;\n        }, 5);\n      }\n    }\n\n    const newclass = \"shortest-path-length path-not-found\";\n    document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n    document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"\";\n    document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Visualize Floyd Warshall Algorithm';\n  }\n\n  initiateVisualizer() {\n    if (!isPathClear) {\n      alert(\"Clear Path First\");\n    } else if (selectedAlgorithm === \"BFS\") {\n      document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Visualize BFS Algorithm';\n      this.visualizeBFS();\n    } else if (selectedAlgorithm === \"Dijkstra\") {\n      this.visualizeDijkstra();\n    } else if (selectedAlgorithm === \"BellmanFord\") {\n      this.visualizeBellmanFord();\n    } else if (selectedAlgorithm === \"FloydWarshall\") {\n      this.visualizeFloydWarshall();\n    } else {\n      alert(\"First Select an Algorithm to Visualize\");\n    }\n\n    selectedAlgorithm = \"\";\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"full-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary dropdown-toggle a-selector\",\n      type: \"button\",\n      id: \"dropdownMenuButton\",\n      \"data-toggle\": \"dropdown\",\n      \"aria-haspopup\": \"true\",\n      \"aria-expanded\": \"false\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 21\n      }\n    }, \"Select Algorithm\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown-menu\",\n      \"aria-labelledby\": \"dropdownMenuButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"dropdown-item mybutton\",\n      href: \"#\",\n      onClick: () => this.handleClickDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 25\n      }\n    }, \"Dijkstra's Algorithm\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"dropdown-item mybutton\",\n      href: \"#\",\n      onClick: () => this.handleClickFloydWarshall(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 25\n      }\n    }, \"Floyd Warshall Algorithm\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary mybutton edit-button\",\n      onClick: () => this.reconfigureGrid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 21\n      }\n    }, \"Reconfigure Grid\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary mybutton current-algorithm\",\n      id: \"calgo\",\n      onClick: () => this.initiateVisualizer(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 21\n      }\n    }, \"Select Algorithm to Visualize\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary mybutton\",\n      onClick: () => this.clearPath(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 21\n      }\n    }, \"Clear Path\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nodeGrid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }\n    }, grid.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        className: \"grid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 29\n        }\n      }, row.map((col, colIndex) => {\n        const {\n          isSrc,\n          isDst,\n          isOther,\n          weight\n        } = col;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: colIndex,\n          isSrc: isSrc,\n          isDst: isDst,\n          weight: weight,\n          isOther: isOther,\n          row: rowIndex,\n          col: colIndex,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 33\n          }\n        });\n      }));\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"shortest-path-notifier\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"shortest-path-length\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nclass Pair {\n  constructor(i, j) {\n    this.x = i;\n    this.y = j;\n    this.weight = generateRandomNumber(1, 50);\n    this.isSrc = i === src_row && j === src_col;\n    this.isDst = i === dst_row && j === dst_col;\n    this.isOther = (i !== src_row || j !== src_col) && (i !== dst_row || j !== dst_col);\n    this.adjacentNodes = [];\n\n    this.getAdjacentNodes = function (grid) {\n      for (let k = 0; k < 4; k++) {\n        let r = this.x + dx[k];\n        let c = this.y + dy[k];\n\n        if (isValidPair(r, c)) {\n          this.adjacentNodes.push(grid[r][c]);\n        }\n      }\n    };\n  }\n\n}\n\nfunction createGrid() {\n  const grid = new Array(rows);\n\n  for (let i = 0; i < rows; i++) {\n    grid[i] = new Array(cols);\n  }\n\n  createPair(grid);\n  addAdjacentNodes(grid);\n  newGrid = grid;\n  return newGrid;\n}\n\nfunction createPair(grid) {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      grid[i][j] = new Pair(i, j);\n    }\n  }\n}\n\nfunction isValidPair(i, j) {\n  return i >= 0 && j >= 0 && i < rows && j < cols;\n}\n\nfunction addAdjacentNodes(grid) {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      grid[i][j].getAdjacentNodes(grid);\n    }\n  }\n}\n\nfunction resetSourceAndDestination() {\n  src_row = generateRandomNumber(0, 9);\n  src_col = generateRandomNumber(0, 9);\n  dst_row = generateRandomNumber(0, 9);\n\n  if (src_row === dst_row) {\n    if (src_row > 0) {\n      dst_row = src_row - 1;\n    } else {\n      dst_row = src_row + 1;\n    }\n  }\n\n  dst_col = generateRandomNumber(0, 9);\n}\n\nfunction chooseAlgorithm(newAlgorithm) {\n  selectedAlgorithm = newAlgorithm;\n}\n\nfunction setPathClear(current_status) {\n  isPathClear = current_status;\n}","map":{"version":3,"sources":["/Users/ahmadfajar/Masters/Computer Science/Algorithm/graph/Shortest-Path-Algorithms-Visualizer-source-code/src/components/Visualizer.js"],"names":["React","Component","Node","Dijkstra","BellmanFord","BFS","FloydWarshall","generateRandomNumber","min","max","Math","ceil","floor","random","rows","cols","src_row","src_col","dst_row","dst_col","dx","dy","newGrid","selectedAlgorithm","isPathClear","Visualizer","constructor","state","grid","componentDidMount","createGrid","setState","clearPath","i","j","setTimeout","node","newClass","x","y","document","getElementById","className","chooseAlgorithm","setPathClear","newclass","getElementsByClassName","innerHTML","reconfigureGrid","resetSourceAndDestination","querySelector","weight","visualizeBFS","src","dst","result","shortestPathLength","time","console","log","visualizeDijkstra","visualizeBellmanFord","visualizeFloydWarshall","handleClickBFS","handleClickDijkstra","handleClickBellmanFord","handleClickFloydWarshall","initiateVisualizer","alert","render","map","row","rowIndex","col","colIndex","isSrc","isDst","isOther","Pair","adjacentNodes","getAdjacentNodes","k","r","c","isValidPair","push","Array","createPair","addAdjacentNodes","newAlgorithm","current_status"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from \"./Node\";\nimport \"./node.css\";\nimport \"./visualizer.css\";\nimport Dijkstra from \"../algorithms/Dijkstra\";\nimport BellmanFord from \"../algorithms/BellmanFord\";\nimport BFS from \"../algorithms/BFS\";\nimport FloydWarshall from \"../algorithms/FloydWarshall\";\n\nfunction generateRandomNumber(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst rows = 10;\nconst cols = 10;\n\nvar src_row = generateRandomNumber(0, 9);\nvar src_col = generateRandomNumber(0, 9);\nvar dst_row = 0;\nif (src_row === dst_row) {\n    if (src_row > 0) {\n        dst_row = src_row - 1;\n    }else {\n        dst_row = src_row + 1;\n    }\n}\nvar dst_col = generateRandomNumber(0, 9);\n\nconst dx = [-1, 0, 1, 0];\nconst dy = [0, 1, 0, -1];\n\nvar newGrid = [];\n\nvar selectedAlgorithm = \"\";\n\nvar isPathClear = true;\n\nexport default class Visualizer extends Component {\n\n    constructor () {\n        super();\n        this.state = {\n            grid: [],\n        };\n    }\n\n    componentDidMount () {\n        const grid = createGrid();\n        this.setState({grid});\n    }\n\n    /* clear path with source, destination and weights unchanged */\n    clearPath () {\n        for (let i=0; i<rows; i++) {\n            for (let j=0; j<cols; j++) {\n                setTimeout(() => {\n                    var node = newGrid[i][j];\n                    var newClass = \"\";\n                    if (node.x===src_row && node.y===src_col) {\n                        newClass = 'node-src';\n                    }\n                    else if (node.x===dst_row && node.y===dst_col) {\n                        newClass = 'node-dst';\n                    }\n                    else {\n                        newClass = 'node-other';\n                    }\n                    document.getElementById(`node-${node.x}-${node.y}`).className = newClass;\n                }, 5);\n            }\n        }\n        chooseAlgorithm(\"\");\n        setPathClear(true);\n        const newclass = \"shortest-path-length path-not-found\";\n        document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Select Algorithm to Visualize';\n        document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n        document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"\";\n    }\n\n    /* re-intialize grid with different weights */\n    reconfigureGrid () {\n        resetSourceAndDestination();\n        for (let i=0; i<rows; i++) {\n            for (let j=0; j<cols; j++) {\n                setTimeout(() => {\n                    var node = newGrid[i][j];\n                    var newClass = \"\";\n                    if (node.x===src_row && node.y===src_col) {\n                        newClass = 'node-src';\n                    }\n                    else if (node.x===dst_row && node.y===dst_col) {\n                        newClass = 'node-dst';\n                    }\n                    else {\n                        newClass = 'node-other';\n                    }\n                    document.getElementById(`node-${node.x}-${node.y}`).className = newClass;\n                    var x = document.getElementById(`node-${node.x}-${node.y}`);\n                    x.querySelector(\".weighted\").innerHTML= newGrid[i][j].weight;\n                }, 5);\n            }\n        }\n        this.componentDidMount();\n        chooseAlgorithm(\"\");\n        setPathClear(true);\n        const newclass = \"shortest-path-length path-not-found\";\n        document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Select Algorithm to Visualize';\n        document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n        document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"\";\n    }\n\n    /* Visualize BFS Algorithm onClick */\n    visualizeBFS () {\n        const src = newGrid[src_row][src_col];\n        const dst = newGrid[dst_row][dst_col];\n        const result = BFS(newGrid, src, dst);\n        const shortestPathLength = result[0];\n        const time = result[1];\n        const newclass = \"shortest-path-length path-found\";\n        setTimeout(() => {\n            document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n            document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"Total cost associated with Minimum Cost Path is \" + shortestPathLength;\n            document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Select Algorithm to Visualize';\n        }, 40*time);\n        setPathClear(false);\n        console.log(shortestPathLength);\n    }\n\n    /* Visualize Dijkstra's Algorithm onClick */\n    visualizeDijkstra () {\n        const src = newGrid[src_row][src_col];\n        const dst = newGrid[dst_row][dst_col];\n        const result = Dijkstra(newGrid, src, dst);\n        const shortestPathLength = result[0];\n        const time = result[1];\n        const newclass = \"shortest-path-length path-found\";\n        setTimeout(() => {\n            document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n            document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"Total cost associated with Minimum Cost Path is \" + shortestPathLength;\n            document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Select Algorithm to Visualize';\n        }, 40*time);\n        setPathClear(false);\n        console.log(shortestPathLength);\n    }\n\n    /* Visualize Bellman Ford Algorithm onClick */\n    visualizeBellmanFord () {\n        const src = newGrid[src_row][src_col];\n        const dst = newGrid[dst_row][dst_col];\n        const result = BellmanFord(newGrid, src, dst);\n        const shortestPathLength = result[0];\n        const time = result[1];\n        const newclass = \"shortest-path-length path-found\";\n        setTimeout(() => {\n            document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n            document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"Total cost associated with Minimum Cost Path is \" + shortestPathLength;\n            document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Select Algorithm to Visualize';\n        }, 10*time);\n        setPathClear(false);\n        console.log(shortestPathLength);\n    }\n\n    /* Visualize Floyd Warshall Algorithm onClick */\n    visualizeFloydWarshall () {\n        const src = newGrid[src_row][src_col];\n        const dst = newGrid[dst_row][dst_col];\n        const result = FloydWarshall(newGrid, src, dst);\n        const shortestPathLength = result[0];\n        const time = result[1];\n        const newclass = \"shortest-path-length path-found\";\n        setTimeout(() => {\n            document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n            document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"Total cost associated with Minimum Cost Path is \" + shortestPathLength;\n            document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Select Algorithm to Visualize';\n        }, 10*time);\n        setPathClear(false);\n        console.log(shortestPathLength);\n    }\n\n    handleClickBFS () {\n        console.log(\"BFS got selected\");\n        chooseAlgorithm(\"BFS\");\n        setPathClear(true);\n        for (let i=0; i<rows; i++) {\n            for (let j=0; j<cols; j++) {\n                setTimeout(() => {\n                    var node = newGrid[i][j];\n                    var newClass = '';\n                    if (node.x===src_row && node.y===src_col) {\n                        newClass = 'node-src';\n                    }\n                    else if (node.x===dst_row && node.y===dst_col) {\n                        newClass = 'node-dst';\n                    }\n                    else {\n                        newClass = 'node-other';\n                    }\n                    document.getElementById(`node-${node.x}-${node.y}`).className = newClass;\n                    var x = document.getElementById(`node-${node.x}-${node.y}`);\n                    x.querySelector(\".weighted\").innerHTML= \"\";\n                }, 5);\n            }\n        }\n        const newclass = \"shortest-path-length path-not-found\";\n        document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n        document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"\";\n        document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Visualize Breadth First Search';\n    }\n\n    handleClickDijkstra () {\n        console.log(\"Dijkstra got selected\");\n        chooseAlgorithm(\"Dijkstra\");\n        setPathClear(true);\n        for (let i=0; i<rows; i++) {\n            for (let j=0; j<cols; j++) {\n                setTimeout(() => {\n                    var node = newGrid[i][j];\n                    var newClass = '';\n                    if (node.x===src_row && node.y===src_col) {\n                        newClass = 'node-src';\n                    }\n                    else if (node.x===dst_row && node.y===dst_col) {\n                        newClass = 'node-dst';\n                    }\n                    else {\n                        newClass = 'node-other';\n                    }\n                    document.getElementById(`node-${node.x}-${node.y}`).className = newClass;\n                    var x = document.getElementById(`node-${node.x}-${node.y}`);\n                    x.querySelector(\".weighted\").innerHTML= newGrid[i][j].weight;\n                }, 5);\n            }\n        }\n        const newclass = \"shortest-path-length path-not-found\";\n        document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n        document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"\";\n        document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Visualize Dijkstra\\'s Algorithm';\n    }\n\n    handleClickBellmanFord () {\n        console.log(\"Bellman Ford got selected\");\n        chooseAlgorithm(\"BellmanFord\");\n        setPathClear(true);\n        for (let i=0; i<rows; i++) {\n            for (let j=0; j<cols; j++) {\n                setTimeout(() => {\n                    var node = newGrid[i][j];\n                    var newClass = '';\n                    if (node.x===src_row && node.y===src_col) {\n                        newClass = 'node-src';\n                    }\n                    else if (node.x===dst_row && node.y===dst_col) {\n                        newClass = 'node-dst';\n                    }\n                    else {\n                        newClass = 'node-other';\n                    }\n                    document.getElementById(`node-${node.x}-${node.y}`).className = newClass;\n                    var x = document.getElementById(`node-${node.x}-${node.y}`);\n                    x.querySelector(\".weighted\").innerHTML= newGrid[i][j].weight;\n                }, 5);\n            }\n        }\n        const newclass = \"shortest-path-length path-not-found\";\n        document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n        document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"\";\n        document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Visualize Bellman Ford Algorithm';\n    }\n\n    handleClickFloydWarshall () {\n        console.log(\"Floyd Warshall got selected\");\n        chooseAlgorithm(\"FloydWarshall\");\n        setPathClear(true);\n        for (let i=0; i<rows; i++) {\n            for (let j=0; j<cols; j++) {\n                setTimeout(() => {\n                    var node = newGrid[i][j];\n                    var newClass = '';\n                    if (node.x===src_row && node.y===src_col) {\n                        newClass = 'node-src';\n                    }\n                    else if (node.x===dst_row && node.y===dst_col) {\n                        newClass = 'node-dst';\n                    }\n                    else {\n                        newClass = 'node-other';\n                    }\n                    document.getElementById(`node-${node.x}-${node.y}`).className = newClass;\n                    var x = document.getElementById(`node-${node.x}-${node.y}`);\n                    x.querySelector(\".weighted\").innerHTML= newGrid[i][j].weight;\n                }, 5);\n            }\n        }\n        const newclass = \"shortest-path-length path-not-found\";\n        document.getElementsByClassName(\"shortest-path-length\")[0].className = newclass;\n        document.getElementsByClassName(\"shortest-path-length\")[0].innerHTML = \"\";\n        document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Visualize Floyd Warshall Algorithm';\n    }\n\n    initiateVisualizer () {\n        if (!isPathClear) {\n            alert(\"Clear Path First\");\n        }\n        else if (selectedAlgorithm===\"BFS\") {\n            document.getElementsByClassName(\"current-algorithm\")[0].innerHTML = 'Visualize BFS Algorithm';\n            this.visualizeBFS();\n        }\n        else if (selectedAlgorithm===\"Dijkstra\") {\n            this.visualizeDijkstra();\n        }\n        else if (selectedAlgorithm===\"BellmanFord\") {\n            this.visualizeBellmanFord();\n        }\n        else if (selectedAlgorithm===\"FloydWarshall\") {\n            this.visualizeFloydWarshall();\n        }\n        else {\n            alert(\"First Select an Algorithm to Visualize\");\n        }\n        selectedAlgorithm = \"\";\n    }\n\n    render () {\n        const {grid} = this.state;\n\n        return (\n            <div className=\"full-grid\">\n\n                <div className=\"dropdown grid\">\n                    <button className=\"btn btn-primary dropdown-toggle a-selector\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Select Algorithm</button>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                        {/*<button className=\"dropdown-item mybutton\" href=\"#\" onClick={() => this.handleClickBFS()}>Breadth First Search</button>*/}\n                        <button className=\"dropdown-item mybutton\" href=\"#\" onClick={() => this.handleClickDijkstra()}>Dijkstra's Algorithm</button>\n                        {/*<button className=\"dropdown-item mybutton\" href=\"#\" onClick={() => this.handleClickBellmanFord()}>Bellman Ford Algorithm</button>*/}\n                        <button className=\"dropdown-item mybutton\" href=\"#\" onClick={() => this.handleClickFloydWarshall()}>Floyd Warshall Algorithm</button>\n                    </div>\n\n                    <button className=\"btn btn-primary mybutton edit-button\" onClick={() => this.reconfigureGrid()}>\n                        Reconfigure Grid\n                    </button>\n                    <button className=\"btn btn-primary mybutton current-algorithm\" id=\"calgo\" onClick={() => this.initiateVisualizer()}>\n                        Select Algorithm to Visualize\n                    </button>\n                    <button className=\"btn btn-primary mybutton\" onClick={() => this.clearPath()}>\n                        Clear Path\n                    </button>\n                </div>\n\n                <div className=\"nodeGrid\">\n                    {grid.map((row, rowIndex) => {\n                    return (<div key={rowIndex} className=\"grid\">\n                        {row.map((col, colIndex) => {\n                            const {isSrc, isDst, isOther, weight} = col;\n                            return (\n                                <Node \n                                    key={colIndex} \n                                    isSrc={isSrc} \n                                    isDst={isDst} \n                                    weight={weight}\n                                    isOther={isOther}\n                                    row={rowIndex} \n                                    col={colIndex}\n                                />\n                            )\n                        })}\n                    </div>)\n                })}\n                </div>\n\n                <div id=\"shortest-path-notifier\">\n                    <p className=\"shortest-path-length\"></p>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nclass Pair {\n    constructor(i, j) {\n        this.x = i;\n        this.y = j;\n        this.weight = generateRandomNumber(1, 50);\n        this.isSrc = (i===src_row && j===src_col);\n        this.isDst = (i===dst_row && j===dst_col);\n        this.isOther = ((i!==src_row || j!==src_col) && (i!==dst_row || j!==dst_col));\n        this.adjacentNodes = [];\n        this.getAdjacentNodes = function(grid) {\n            for (let k=0; k<4; k++) {\n                let r = this.x + dx[k];\n                let c = this.y + dy[k];\n                if (isValidPair(r, c)) {\n                   this.adjacentNodes.push(grid[r][c]); \n                }\n            }\n        }\n    }\n}\n\nfunction createGrid () {\n    const grid = new Array(rows);\n        for (let i=0; i<rows; i++) {\n            grid[i] = new Array(cols);\n        }\n        createPair(grid);\n        addAdjacentNodes(grid);\n        newGrid = grid;\n        return newGrid;\n}\n\nfunction createPair(grid) {\n    for (let i=0; i<rows; i++) {\n        for (let j=0; j<cols; j++) {\n            grid[i][j] = new Pair(i, j);\n        }\n    }\n}\n\nfunction isValidPair(i, j) {\n    return (i >= 0 && j >= 0 && i < rows && j < cols);\n}\n\nfunction addAdjacentNodes(grid) {\n    for (let i=0; i<rows; i++) {\n        for (let j=0; j<cols; j++) {\n            grid[i][j].getAdjacentNodes(grid);\n        }\n    }\n}\n\nfunction resetSourceAndDestination() {\n    src_row = generateRandomNumber(0, 9);\n    src_col = generateRandomNumber(0, 9);\n    dst_row = generateRandomNumber(0, 9);\n    if (src_row === dst_row) {\n        if (src_row > 0) {\n            dst_row = src_row - 1;\n        }else {\n            dst_row = src_row + 1;\n        }\n    }\n    dst_col = generateRandomNumber(0, 9);\n}\n\nfunction chooseAlgorithm(newAlgorithm) {\n    selectedAlgorithm = newAlgorithm;\n}\n\nfunction setPathClear(current_status) {\n    isPathClear = current_status;\n}"]},"metadata":{},"sourceType":"module"}